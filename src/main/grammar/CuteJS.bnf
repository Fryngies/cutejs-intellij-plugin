{
  parserClass="org.cutejs.lang.parser.CuteParser"
  parserUtilClass="org.cutejs.lang.parser.CuteParserUtil"

  elementTypeHolderClass="org.cutejs.lang.psi.CuteTypes"
  elementTypeClass="org.cutejs.lang.psi.CuteCompositeElementType"
  tokenTypeClass="org.cutejs.lang.psi.CuteTokenType"

  psiClassPrefix="JST"
  psiImplClassSuffix="Impl"
  psiPackage="org.cutejs.lang.psi"
  psiImplPackage="org.cutejs.lang.psi.impl"
}

JSTemplate ::= item_*

private item_ ::= (T_OUTER_DATA|statement|data)

statement ::= T_OPEN expression T_CLOSE
expression ::= (escape|interpolate|typedef|namespace|export|partial|inline|eval_data)
escape ::= T_ESCAPE eval_expression
interpolate ::= T_INTERPOLATE eval_expression
typedef ::= T_TYPEDEF T_THIS_PROPERTY T_ARRAYS_PECIFIER? T_DOC_TYPE
namespace ::= T_NAMESPACE T_IDENTIFIER
export ::= T_EXPORT export_args
partial ::= T_PARTIAL include_args
inline ::= T_INLINE include_args
include_args ::= T_IDENTIFIER T_COMMA eval_expression T_COMMA export_args
export_args ::= T_IDENTIFIER T_ARRAY_SPECIFIER?
data ::= T_DATA+
eval_data ::= T_EVAL_CHAR+
eval_expression ::= T_EVAL_EXPRESSION_CHAR+